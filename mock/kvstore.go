// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adetunjii/netflakes/port (interfaces: KVStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/adetunjii/netflakes/model"
	gomock "github.com/golang/mock/gomock"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockKVStore) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockKVStoreMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockKVStore)(nil).CloseConnection))
}

// GetMovie mocks base method.
func (m *MockKVStore) GetMovie(arg0 context.Context, arg1 string) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockKVStoreMockRecorder) GetMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockKVStore)(nil).GetMovie), arg0, arg1)
}

// GetMovieCharacters mocks base method.
func (m *MockKVStore) GetMovieCharacters(arg0 context.Context, arg1 int64) ([]model.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieCharacters", arg0, arg1)
	ret0, _ := ret[0].([]model.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieCharacters indicates an expected call of GetMovieCharacters.
func (mr *MockKVStoreMockRecorder) GetMovieCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieCharacters", reflect.TypeOf((*MockKVStore)(nil).GetMovieCharacters), arg0, arg1)
}

// GetMovies mocks base method.
func (m *MockKVStore) GetMovies(arg0 context.Context) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", arg0)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockKVStoreMockRecorder) GetMovies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockKVStore)(nil).GetMovies), arg0)
}

// SetMovie mocks base method.
func (m *MockKVStore) SetMovie(arg0 context.Context, arg1 string, arg2 *model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovie", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovie indicates an expected call of SetMovie.
func (mr *MockKVStoreMockRecorder) SetMovie(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovie", reflect.TypeOf((*MockKVStore)(nil).SetMovie), arg0, arg1, arg2)
}

// SetMovieCharacters mocks base method.
func (m *MockKVStore) SetMovieCharacters(arg0 context.Context, arg1 int64, arg2 []model.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovieCharacters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovieCharacters indicates an expected call of SetMovieCharacters.
func (mr *MockKVStoreMockRecorder) SetMovieCharacters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovieCharacters", reflect.TypeOf((*MockKVStore)(nil).SetMovieCharacters), arg0, arg1, arg2)
}

// SetMovies mocks base method.
func (m *MockKVStore) SetMovies(arg0 context.Context, arg1 []model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMovies", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMovies indicates an expected call of SetMovies.
func (mr *MockKVStoreMockRecorder) SetMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMovies", reflect.TypeOf((*MockKVStore)(nil).SetMovies), arg0, arg1)
}
