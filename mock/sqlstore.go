// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adetunjii/netflakes/port (interfaces: SqlStore)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	port "github.com/adetunjii/netflakes/port"
	gomock "github.com/golang/mock/gomock"
)

// MockSqlStore is a mock of SqlStore interface.
type MockSqlStore struct {
	ctrl     *gomock.Controller
	recorder *MockSqlStoreMockRecorder
}

// MockSqlStoreMockRecorder is the mock recorder for MockSqlStore.
type MockSqlStoreMockRecorder struct {
	mock *MockSqlStore
}

// NewMockSqlStore creates a new mock instance.
func NewMockSqlStore(ctrl *gomock.Controller) *MockSqlStore {
	mock := &MockSqlStore{ctrl: ctrl}
	mock.recorder = &MockSqlStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlStore) EXPECT() *MockSqlStoreMockRecorder {
	return m.recorder
}

// Movie mocks base method.
func (m *MockSqlStore) Movie() port.MovieStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Movie")
	ret0, _ := ret[0].(port.MovieStore)
	return ret0
}

// Movie indicates an expected call of Movie.
func (mr *MockSqlStoreMockRecorder) Movie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Movie", reflect.TypeOf((*MockSqlStore)(nil).Movie))
}
